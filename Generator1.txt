Generators in python:
---------------------
Iterations can be created easily using generators.

1.__iter__()
2.__next__()
StopIteration Exception.
Simple way of creating iterators using generators.
Generator can return iterator which can be iterated over.

How to create a generator in python?
yield statement is used to create a generator.

Differences between generator and normal function?
After the yield statement the control is returned to the caller.

def my_gen():
   n=1
   print("This is printed first")
   yield n
   n+=1
   print("This is printed second")
   yield n
   n+=1
   print("This is printed last")
   yield n

for item in my_gen():
   print(item)

def rev_str(my_str):
  length=len(my_str)
  for i in range(length-1,-1,-1):
     yield my_str[i]

for char in rev_str("hello"):
    print(char)


Generator Expressions:
----------------------

A generator expression is much more memory efficient than list comprehension.
m=[1,3,6,10]
a=(x**2 for x in m)
print(next(a))
print(next(a))
print(next(a))
print(next(a))

print(sum(x**2 for x in m))




