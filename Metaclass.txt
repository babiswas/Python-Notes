A=type('A',(object,),{})

This is how a class is created using metaclass.

class Exampleclass(metaclass=type):
     pass

interpreater:
1.name of the class.
2.base class of the class.
3.metaclass of the class.
4.variables and attributes of the class.


classobj=type('Classname',(object,),{})


When type is called?
1.__call__ method of type.
2.__new__ and __init__method is called.

The new method creates new object and init method initiallises it.

class A:
  def __init__(self,data):
     self.data=data
  def getd3(self):
     return self.data*3

class Mymeta(type):
   def __new__(metaname,classname,baseclass,attrs):
      attrs['getdata']=A.__dict__['getd3']
      return type.__new__(metaname,classname,baseclass,attrs)
   def __init__(self,cls,baseclass,attrs):
      pass
class Kls(metaclass=Mymeta):
   def __init__(self,data):
      self.data=data
   def printd(self):
     print(self.data)

ik=Kls('ass')
ik.printd()
print(ik.getdata())