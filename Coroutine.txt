Coroutines:
1.Receives input repeatedly
2.Process Input.
3.Stops at yield statement.

def coroutine_example():
  While True:
    x=yield
    print(x)
c=coroutine_example()
c.send(10)
c.next()

def counter(string):
   count=0
   try:
     While True:
       item=yield
       if isinstance(item,str):
         if item in string:
           count=count+1
           print(item)
         else:
           print('No match')
       else:
           print('Not a string')
   except GeneratorExit:
      print(count)

c=counter('California')
c.next()
c.send('Cali')
c.send('Hawaii')
c.send(1234)
c.close()


Coroutine decorator

def coroutine_decorator(func):
   def wrap(*args,**kwargs):
       cr=func(*args,**kwargs)
       cr.next()
       return cr
   return wrap

@coroutine_decorator
def coroutine_example():
    while True:
      x=yield
      print(x)
c=coroutine_example()
c.send('success')

from coroutine_decorator import coroutine_decorator

def sender(filename,target):
   for line in open(filename):
      target.send(line)
   target.close()

@coroutine_decorator
def match_counter(string):
  count=0
  try:
    While True:
      line=yield
      if string in line:
          count+=1
  except GeneratorExit:
     print('{}:{}'.format(string,count))

c=match_counter('Da')
sender('names.txt',c)


@coroutine_decorator
def longer_than(n):
   count=0
   try:
     While True:
       line=yield
       if len(line)>n:
          print(line)
          count+=1
   except GeneratorExit:
      print('longer than {}:{}'.format(n,count))

l=longer_than(14)
sender('names.txt',l)

Coroutines are also used to create datapipelines:

def coroutine_decorator(func):
   def wrap(*args,**kwargs):
       cr=func(*args,**kwargs)
       cr.next()
       return cr
   return wrap

@coroutine_decorator
def router():
  try:
    while True:
        line=yield
        (first,last)=line.split('')
        fnames.send(first)
        lnames.send(last.strip())
    expect GeneratorExit:
        fnames.close()
        lnames.close()

@coroutine_decorator
def file_write(filename):
   try:
     with open(filename,'a') as file:
        while True:
          line=yield
          file.write(line+'\n')
   except GeneratorExit:
        file.close()

if __name__=="__main__":
  fnames=file_write("first_names.txt")
  lnames=file_write("last_names.txt")
  router=router()
  for name in open('names.txt'):
      router.send(name)
  router.close()

  
       





     

