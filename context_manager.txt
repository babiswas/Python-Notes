Context manager:

@contextmanager
def simple_cm(n):
   try:


     yield
   finally:

from contextlib import contextmanager

@contextmanager
def simple_context_manager(obj):
    try:
        obj.some_property+=1
        yield
    finally:
        obj.some_property-=1

class Some_obj(object):
   def __init__(self,arg):
     self.some_property=arg

obj=Some_obj(5)
obj.some_property
with simple_context_manager(obj):
     print(obj.some_property)
#6
print(obj.some_property)
#5

On applying the contextmanager decorator on a python object it allows you to call the function with with statement.

from time import time
from contextlib import contextmanager

HEADER="This is a header\n"
FOOTER="\nthis is a footer \n"

@contextmanager
def new_log_file(name):
   try:
     logname=name
     f=open(logname,'w')
     f.write(HEADER)
     yield f
   finally:
     f.write(FOOTER)
     print("logfile created")
     f.close()

With new_log_file('logfile'):
    file.write('this is the  body')

After the yield statement the control comes to the caller.





   